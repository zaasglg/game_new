const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è WebSocket
const io = socketIo(server, {
  cors: {
    origin: ["http://localhost:8000", "http://127.0.0.1:8000"],
    methods: ["GET", "POST"],
    allowedHeaders: ["*"],
    credentials: true
  }
});

app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞)
function hashString(str) {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  return Math.abs(hash);
}

// Seeded Random –∫–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
class SeededRandom {
  constructor(seed) {
    this.seed = seed;
  }
  
  nextFloat() {
    this.seed = (this.seed * 9301 + 49297) % 233280;
    return this.seed / 233280;
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ user_id
const userConnections = new Map();
const gameRooms = new Map(); // user_id -> room_data

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã (–ì–û–¢–û–í–´–ï –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ game2.js)
const GAME_CONFIG = {
  cfs: {
    easy: [1.03, 1.07, 1.12, 1.17, 1.23, 1.29, 1.36, 1.44, 1.53, 1.63, 1.75, 1.88, 2.04, 2.22, 2.45, 2.72, 3.06, 3.50, 4.08, 4.90, 6.13, 6.61, 9.81, 19.44],
    medium: [1.12, 1.28, 1.47, 1.70, 1.98, 2.33, 2.76, 3.32, 4.03, 4.96, 6.20, 6.91, 8.90, 11.74, 15.99, 22.61, 33.58, 53.20, 92.17, 182.51, 451.71, 1788.80],
    hard: [1.23, 1.55, 1.98, 2.56, 3.36, 4.49, 5.49, 7.53, 10.56, 15.21, 22.59, 34.79, 55.97, 94.99, 172.42, 341.40, 760.46, 2007.63, 6956.47, 41321.43],
    hardcore: [1.63, 2.80, 4.95, 9.08, 15.21, 30.12, 62.96, 140.24, 337.19, 890.19, 2643.89, 9161.08, 39301.05, 233448.29]
  },
  chance: {
    easy: [7, 23],
    medium: [5, 15], 
    hard: [3, 10],
    hardcore: [2, 6]
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–æ–¥–æ–≤
class ExactMovesGenerator {
  constructor() {
    this.gameSeeds = new Map(); // user_id -> { seed, sequence }
    this.activeGames = new Map(); // user_id -> game_data
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed'–∞ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  generateGameSeed(user_id, difficulty = 'easy') {
    const seed = Math.floor(Math.random() * 1000000);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ–π –∏–≥—Ä—ã
    const exactSequence = this.generateExactSequence(seed, difficulty);
    
    this.gameSeeds.set(user_id, {
      seed,
      difficulty,
      sequence: exactSequence,
      created_at: new Date()
    });

    console.log(`üéØ Generated exact sequence for ${user_id}:`, {
      seed,
      difficulty,
      total_moves: exactSequence.length
    });

    return {
      user_id,
      seed,
      difficulty,
      sequence: exactSequence,
      total_moves: exactSequence.length
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¢–û–ß–ù–ê–Ø –∫–æ–ø–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ game2.js —Å—Ç—Ä–æ–∫–∞ 236)
  generateExactSequence(seed, difficulty) {
    const sequence = [];
    const cfs = GAME_CONFIG.cfs[difficulty];
    const chance = GAME_CONFIG.chance[difficulty];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –û–î–ò–ù flame segment –¥–ª—è –≤—Å–µ–π –∏–≥—Ä—ã (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ)
    const random1 = this.seededRandom(seed, 0);
    const random2 = this.seededRandom(seed, 1);
    
    // –¢–û–ß–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ 236 game2.js:
    // Math.random() * 100 < 20 ? 0 : Math.ceil( Math.random() * SETTINGS.chance[ this.cur_lvl ][ Math.round( Math.random() * 100  ) > 95 ? 1 : 0 ] );
    let flameSegment;
    
    if (random1 * 100 < 20) {
      // 20% —à–∞–Ω—Å —Å–≥–æ—Ä–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
      flameSegment = 0;
    } else {
      // 80% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
      const useSecondChance = Math.round(random2 * 100) > 95; // 5% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å
      const selectedChance = chance[useSecondChance ? 1 : 0];
      const random3 = this.seededRandom(seed, 2);
      flameSegment = Math.ceil(random3 * selectedChance);
    }

    console.log(`üéØ Generated flame segment ${flameSegment} for difficulty ${difficulty} (seed: ${seed})`);

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –≤—Å–µ —à–∞–≥–∏ –¥–æ flame segment = –±–µ–∑–æ–ø–∞—Å–Ω–æ, flame segment = –±–æ–º–±–∞
    for (let step = 0; step < 15; step++) { // –ú–∞–∫—Å–∏–º—É–º 15 —à–∞–≥–æ–≤ –∫–∞–∫ –≤ –∏–≥—Ä–µ
      const isSafe = step < flameSegment;
      const multiplier = step < cfs.length ? cfs[step] : cfs[cfs.length - 1];
      
      sequence.push({
        step: step + 1,
        position: step, // –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä–æ—á–∫–∏
        safe: isSafe,
        multiplier: multiplier,
        result: isSafe ? 'safe' : 'bomb',
        is_flame_segment: step === flameSegment
      });

      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ flame segment - –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
      if (!isSafe) {
        break;
      }
    }

    return sequence;
  }

  // –¢–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–Ω–¥–æ–º–∞ —á—Ç–æ –≤ –∏–≥—Ä–µ
  seededRandom(seed, step) {
    const x = Math.sin(seed + step * 12345) * 10000;
    return x - Math.floor(x);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ N —Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getNextMoves(user_id, current_step = 0, count = 10) {
    const gameData = this.gameSeeds.get(user_id);
    if (!gameData) {
      return null;
    }

    const nextMoves = gameData.sequence.slice(current_step, current_step + count);
    
    return {
      user_id,
      current_step,
      next_moves: nextMoves,
      remaining_moves: gameData.sequence.length - current_step,
      game_will_end_at: gameData.sequence.length
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  getFullSequence(user_id) {
    const gameData = this.gameSeeds.get(user_id);
    return gameData ? gameData.sequence : null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞
  validateMove(user_id, step, position) {
    const gameData = this.gameSeeds.get(user_id);
    if (!gameData || step > gameData.sequence.length || step < 1) {
      return null;
    }

    const expectedMove = gameData.sequence[step - 1];
    
    return {
      step,
      expected_position: expectedMove.position,
      actual_position: position,
      result: expectedMove.result,
      safe: expectedMove.safe,
      multiplier: expectedMove.multiplier,
      is_flame_segment: expectedMove.is_flame_segment,
      position_match: expectedMove.position === position, // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
      step_valid: true
    };
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  startNewGame(user_id, difficulty = 'easy') {
    return this.generateGameSeed(user_id, difficulty);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
  clearGame(user_id) {
    this.gameSeeds.delete(user_id);
    this.activeGames.delete(user_id);
  }
}

const exactGenerator = new ExactMovesGenerator();

console.log('üéÆ Chicken Road WebSocket Server Starting...');

io.on('connection', (socket) => {
  console.log(`üì± New connection: ${socket.id}`);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('register_user', (data) => {
    const { user_id, type } = data; // type: 'game' –∏–ª–∏ 'hack'
    
    if (!user_id) {
      socket.emit('error', { message: 'user_id is required' });
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (!userConnections.has(user_id)) {
      userConnections.set(user_id, {});
    }
    
    userConnections.get(user_id)[type] = socket;
    socket.user_id = user_id;
    socket.connection_type = type;
    
    console.log(`üë§ User ${user_id} registered as ${type}`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    socket.emit('registered', { 
      user_id, 
      type, 
      status: 'connected' 
    });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∏–≥—Ä–∞, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    if (type === 'game') {
      if (!gameRooms.has(user_id)) {
        gameRooms.set(user_id, {
          user_id,
          game_state: 'waiting',
          current_round: null,
          predictions: [],
          created_at: new Date()
        });
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã —Ö–∞–∫-–±–æ—Ç—É (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
      const userConns = userConnections.get(user_id);
      if (userConns && userConns.hack) {
        userConns.hack.emit('game_connected', {
          user_id,
          room_data: gameRooms.get(user_id)
        });
      }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ö–∞–∫-–±–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–µ—Å–ª–∏ –∏–≥—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
    if (type === 'hack') {
      const roomData = gameRooms.get(user_id);
      if (roomData) {
        socket.emit('game_state', roomData);
      }
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∏–≥—Ä—ã
  socket.on('game_update', (data) => {
    const { user_id } = socket;
    if (!user_id) return;
    
    console.log(`üéØ Game update from ${user_id}:`, data);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    if (gameRooms.has(user_id)) {
      const room = gameRooms.get(user_id);
      Object.assign(room, data, { 
        last_update: new Date(),
        user_id 
      });
      gameRooms.set(user_id, room);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ö–∞–∫-–±–æ—Ç—É
    const userConns = userConnections.get(user_id);
    if (userConns && userConns.hack) {
      userConns.hack.emit('game_update', {
        user_id,
        ...data,
        timestamp: new Date()
      });
    }
  });
  
  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –æ—Ç —Ö–∞–∫-–±–æ—Ç–∞ - —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  socket.on('request_analysis', (data) => {
    const { user_id } = socket;
    if (!user_id) return;
    
    console.log(`üîç Exact sequence request from ${user_id}:`, data);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —Å —Ç–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    const difficulty = data.difficulty || 'easy';
    const exactGame = exactGenerator.startNewGame(user_id, difficulty);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Ö–æ–¥—ã
    const nextMoves = exactGenerator.getNextMoves(user_id, 0, 15);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–∞–∫-–±–æ—Ç—É
    socket.emit('exact_sequence', {
      user_id,
      request_id: data.request_id,
      exact_game: exactGame,
      next_moves: nextMoves,
      message: '–¢–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
      timestamp: new Date()
    });
    
    // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–µ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
    const userConns = userConnections.get(user_id);
    if (userConns && userConns.game) {
      userConns.game.emit('exact_sequence', {
        user_id,
        exact_game: exactGame,
        next_moves: nextMoves,
        timestamp: new Date()
      });
    }
  });
  
  // –ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥–æ–≤
  socket.on('get_next_moves', (data) => {
    const { user_id } = socket;
    if (!user_id) return;
    
    console.log(`üéØ Next moves request from ${user_id}:`, data);
    
    const currentStep = data.current_step || 0;
    const count = data.count || 10;
    const nextMoves = exactGenerator.getNextMoves(user_id, currentStep, count);
    
    if (nextMoves) {
      socket.emit('next_moves_response', {
        user_id,
        ...nextMoves,
        timestamp: new Date()
      });
    } else {
      socket.emit('error', {
        message: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.'
      });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
  socket.on('validate_move', (data) => {
    const { user_id } = socket;
    if (!user_id) return;
    
    console.log(`‚úÖ Move validation from ${user_id}:`, data);
    
    const validation = exactGenerator.validateMove(user_id, data.step, data.position);
    
    if (validation) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      socket.emit('move_result', {
        user_id,
        validation,
        timestamp: new Date()
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—Ä—É–≥–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é (–∏–≥—Ä–∞ <-> —Ö–∞–∫)
      const userConns = userConnections.get(user_id);
      if (userConns) {
        const targetConnection = socket.connection_type === 'game' ? userConns.hack : userConns.game;
        if (targetConnection) {
          targetConnection.emit('move_result', {
            user_id,
            validation,
            from: socket.connection_type,
            timestamp: new Date()
          });
        }
      }
    }
  });
  
  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
  socket.on('start_new_game', (data) => {
    const { user_id } = socket;
    if (!user_id) return;
    
    console.log(`üéÆ New game started by ${user_id}:`, data);
    
    const difficulty = data.difficulty || 'easy';
    const exactGame = exactGenerator.startNewGame(user_id, difficulty);
    const nextMoves = exactGenerator.getNextMoves(user_id, 0, 15);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userConns = userConnections.get(user_id);
    if (userConns) {
      Object.values(userConns).forEach(conn => {
        if (conn) {
          conn.emit('new_game_started', {
            user_id,
            exact_game: exactGame,
            next_moves: nextMoves,
            timestamp: new Date()
          });
        }
      });
    }
  });
  
  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
  socket.on('end_game', (data) => {
    const { user_id } = socket;
    if (!user_id) return;
    
    console.log(`üèÅ Game ended by ${user_id}:`, data);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    exactGenerator.clearGame(user_id);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const userConns = userConnections.get(user_id);
    if (userConns) {
      Object.values(userConns).forEach(conn => {
        if (conn) {
          conn.emit('game_ended', {
            user_id,
            final_result: data.result,
            timestamp: new Date()
          });
        }
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Ç —Ö–∞–∫-–±–æ—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  socket.on('hack_prediction', (data) => {
    const { user_id } = socket;
    if (!user_id) return;
    
    console.log(`üîÆ Hack prediction from ${user_id}:`, data);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∫–æ–º–Ω–∞—Ç–µ
    if (gameRooms.has(user_id)) {
      const room = gameRooms.get(user_id);
      if (!room.predictions) room.predictions = [];
      room.predictions.push({
        ...data,
        timestamp: new Date()
      });
      gameRooms.set(user_id, room);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏–≥—Ä–µ
    const userConns = userConnections.get(user_id);
    if (userConns && userConns.game) {
      userConns.game.emit('hack_prediction', {
        user_id,
        ...data,
        timestamp: new Date()
      });
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    const { user_id, connection_type } = socket;
    
    console.log(`üì± Disconnected: ${socket.id}${user_id ? ` (${user_id}, ${connection_type})` : ''}`);
    
    if (user_id && userConnections.has(user_id)) {
      const userConns = userConnections.get(user_id);
      if (userConns[connection_type]) {
        delete userConns[connection_type];
        
        // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (Object.keys(userConns).length === 0) {
          userConnections.delete(user_id);
          gameRooms.delete(user_id);
          console.log(`üóëÔ∏è Removed user ${user_id} completely`);
        } else {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
          Object.values(userConns).forEach(conn => {
            if (conn) {
              conn.emit('peer_disconnected', {
                user_id,
                disconnected_type: connection_type
              });
            }
          });
        }
      }
    }
  });
});

// API endpoints
app.get('/status', (req, res) => {
  res.json({
    status: 'running',
    connections: userConnections.size,
    rooms: gameRooms.size,
    timestamp: new Date()
  });
});

app.get('/users', (req, res) => {
  const users = Array.from(userConnections.keys()).map(user_id => {
    const connections = userConnections.get(user_id);
    const room = gameRooms.get(user_id);
    return {
      user_id,
      connections: Object.keys(connections),
      room_state: room ? room.game_state : null,
      last_update: room ? room.last_update : null,
      auto_prediction: room ? room.auto_prediction : null
    };
  });
  
  res.json({
    users,
    total: users.length
  });
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (API)
app.get('/exact-sequence/:user_id', (req, res) => {
  const { user_id } = req.params;
  const { difficulty = 'easy' } = req.query;
  
  try {
    const exactGame = exactGenerator.startNewGame(user_id, difficulty);
    res.json(exactGame);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥–æ–≤ (API)
app.get('/next-moves/:user_id', (req, res) => {
  const { user_id } = req.params;
  const { current_step = 0, count = 10 } = req.query;
  
  try {
    const nextMoves = exactGenerator.getNextMoves(user_id, parseInt(current_step), parseInt(count));
    if (nextMoves) {
      res.json(nextMoves);
    } else {
      res.status(404).json({ error: 'Game not found for user' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (API)
app.get('/full-sequence/:user_id', (req, res) => {
  const { user_id } = req.params;
  
  try {
    const sequence = exactGenerator.getFullSequence(user_id);
    if (sequence) {
      res.json({ user_id, sequence, total_moves: sequence.length });
    } else {
      res.status(404).json({ error: 'Game not found for user' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ (API)
app.post('/validate-move/:user_id', (req, res) => {
  const { user_id } = req.params;
  const { step, position } = req.body;
  
  try {
    const validation = exactGenerator.validateMove(user_id, step, position);
    if (validation) {
      res.json(validation);
    } else {
      res.status(404).json({ error: 'Game not found or invalid step' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã (API) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ì–û–¢–û–í–´–ï –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ game2.js
app.get('/generate-coefficients/:user_id', (req, res) => {
  const { user_id } = req.params;
  const { difficulty = 'easy' } = req.query;
  
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ì–û–¢–û–í–´–ï –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ game2.js
    const coefficients = GAME_CONFIG.cfs[difficulty];
    
    if (!coefficients) {
      return res.status(400).json({ 
        error: `–ù–µ–≤–µ—Ä–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficulty}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: easy, medium, hard, hardcore` 
      });
    }
    
    res.json({
      user_id,
      difficulty,
      coefficients,
      total_coefficients: coefficients.length,
      generated_at: new Date(),
      message: '–ì–æ—Ç–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ game2.js –ø–æ–ª—É—á–µ–Ω—ã'
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è flame segment –¥–ª—è –∏–≥—Ä—ã (API) - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ –∫–∞–∫–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–æ–π–¥–µ—Ç –∫—É—Ä–∏—Ü–∞
app.get('/generate-flame-segment/:user_id', (req, res) => {
  const { user_id } = req.params;
  const { difficulty = 'easy' } = req.query;
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º flame segment –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const flameData = generateFlameSegment(user_id, difficulty);
    
    res.json({
      user_id,
      difficulty,
      ...flameData,
      generated_at: new Date(),
      message: 'Flame segment —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≥—Ä—ã'
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ flame segment (–¢–û–ß–ù–ê–Ø –∫–æ–ø–∏—è –∏–∑ game2.js)
function generateFlameSegment(user_id, difficulty) {
  // –°–æ–∑–¥–∞–µ–º seed –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ difficulty –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
  const seed = hashString(user_id + difficulty);
  const rng = new SeededRandom(seed);
  
  const cfs = GAME_CONFIG.cfs[difficulty];
  const chance = GAME_CONFIG.chance[difficulty];
  
  // –¢–û–ß–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ game2.js —Å—Ç—Ä–æ–∫–∞ 236:
  // Math.random() * 100 < 20 ? 0 : Math.ceil( Math.random() * SETTINGS.chance[ this.cur_lvl ][ Math.round( Math.random() * 100  ) > 95 ? 1 : 0 ] );
  let flameSegment;
  
  if (rng.nextFloat() * 100 < 20) {
    // 20% —à–∞–Ω—Å —Å–≥–æ—Ä–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
    flameSegment = 0;
  } else {
    // 80% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
    const useSecondChance = Math.round(rng.nextFloat() * 100) > 95; // 5% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å
    const selectedChance = chance[useSecondChance ? 1 : 0];
    flameSegment = Math.ceil(rng.nextFloat() * selectedChance);
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
  const maxSafeMultiplier = flameSegment > 0 ? cfs[flameSegment - 1] : 1.0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –æ–≥–æ–Ω—å
  const flameMultiplier = flameSegment < cfs.length ? cfs[flameSegment] : 'MAX';
  
  return {
    flame_segment: flameSegment,
    max_safe_steps: flameSegment,
    max_safe_multiplier: maxSafeMultiplier,
    flame_multiplier: flameMultiplier,
    total_safe_coefficients: flameSegment,
    seed: seed,
    risk_level: flameSegment === 0 ? 'CRITICAL' : flameSegment <= 2 ? 'HIGH' : flameSegment <= 5 ? 'MEDIUM' : 'LOW'
  };
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down server...');
  server.close(() => {
    console.log('‚úÖ Server shut down gracefully');
    process.exit(0);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üöÄ Chicken Road WebSocket Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° WebSocket: ws://localhost:${PORT}`);
  console.log(`üåê HTTP API: http://localhost:${PORT}`);
  console.log(`üìä –°—Ç–∞—Ç—É—Å: http://localhost:${PORT}/status`);
});
